import { Guard, GuardWithKnownInputType, Predicate } from './types';
export declare function or<A>(a: Guard<A>): Guard<A>;
export declare function or<A, B>(a: Guard<A>, b: Guard<B>): Guard<A | B>;
export declare function or<A, B, C>(a: Guard<A>, b: Guard<B>, c: Guard<C>): Guard<A | B | C>;
export declare function or<A, B, C, D>(a: Guard<A>, b: Guard<B>, c: Guard<C>, d: Guard<D>): Guard<A | B | C | D>;
export declare function or<T>(...guards: Predicate<T>[]): Predicate<T>;
export declare function or(...guards: Predicate[]): Predicate;
export declare function and<A>(a: Guard<A>): Guard<A>;
export declare function and<A, B extends A>(a: Guard<A>, b: GuardWithKnownInputType<A, B>): Guard<A & B>;
export declare function and<A, B>(a: Guard<A>, b: Guard<B>): Guard<A & B>;
export declare function and<A, B extends A, C extends B>(a: Guard<A>, b: GuardWithKnownInputType<A, B>, c: GuardWithKnownInputType<A & B, C>): Guard<A & B & C>;
export declare function and<A, B extends A, C extends B, D extends C>(a: Guard<A>, b: GuardWithKnownInputType<A, B>, c: GuardWithKnownInputType<A & B, C>, d: GuardWithKnownInputType<A & B & C, D>): Guard<A & B & C & D>;
export declare function and<A>(a: Guard<A>, ...predicates: Predicate[]): Guard<A>;
